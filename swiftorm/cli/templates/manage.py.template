import click
import os
import sys
import asyncio


# This makes sure we can import from the project root
sys.path.append(os.getcwd())


@click.group()
def manage():
    """Management script for this SwiftORM project."""
    pass


@manage.command()
@click.argument('app_name')
def startapp(app_name):
    """Creates a new app directory with a models.py file."""
    try:
        app_path = Path(os.getcwd()) / app_name
        
        if app_path.exists():
            click.echo(f"Error: Directory '{app_name}' already exists.")
            return
            
        # Create the app directory and the necessary files
        app_path.mkdir()
        (app_path / '__init__.py').touch()
        
        # Create a models.py file with a helpful comment
        with open(app_path / 'models.py', 'w') as f:
            f.write("# Define your models for the '{}' app here.\n".format(app_name))
            f.write("from swiftorm.core.models import Model\n")
            f.write("from swiftorm.core.fields import IntegerField, TextField\n")

        click.echo(f"App '{app_name}' created successfully.")
        click.echo(f"Don't forget to add '{app_name}' to INSTALLED_APPS in your settings.py!")

    except Exception as e:
        click.echo(f"An error occurred: {e}")


@manage.command()
def createtables():
    """
    Discovers all models and creates their tables in the database.
    """
    click.echo("Creating database tables...")
    import swiftorm
    
    async def run_creation():
        swiftorm.setup('settings')
        try:
            # --- THE FIX IS HERE ---
            # 1. We must connect before doing anything.
            await swiftorm.connect()
            # 2. Now we can create the tables.
            await swiftorm.create_all_tables()
            click.echo("All tables created successfully.")
        except Exception as e:
            click.echo(f"An error occurred: {e}")
        finally:
            # 3. We must disconnect at the end.
            await swiftorm.disconnect()

    asyncio.run(run_creation())


if __name__ == '__main__':
    # We need to import Path here as well for the startapp command
    from pathlib import Path
    manage()
